import Head from 'next/head';
import { useRouter } from 'next/router';
import { useContext, useEffect, useState } from 'react';
import { AppContext } from '@/components/context';
import Layout from '../src/components/layout';
import axios from 'axios';
import { HEADER_FOOTER_ENDPOINT } from '@/constants/endpoints';
import { clearCart } from '@/components/utils/cart';

function ThankYouContent() {
	const router = useRouter();
	const { orderId } = router.query;
	const [error, setError] = useState(null);
	const [orderData, setOrderData] = useState(null);
	const { cart, setCart } = useContext( AppContext );
	const [ isClearCartProcessing, setClearCartProcessing ] = useState( false );

	useEffect(() => {

	clearCart( setCart, setClearCartProcessing );

	if (orderId) {
		fetch(`/api/get-order?order_id=${orderId}`)
		.then(res => res.json())
		.then(data => {
			if (data.error) {
			setError(data.error);
			} else {
			setOrderData(data);
			}
		})
		.catch(err => {
			console.error(err);
			setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞.");
		});
	}
	}, [orderId]); 


	if (error) return <p className="error-msg">{error}</p>;

	if (!orderData) return <div className='download-text'>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</div>;
	
	const statusMap = {
		pending: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
		processing: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
		completed: '–ó–∞–≤–µ—Ä—à—ë–Ω',
		cancelled: '–û—Ç–º–µ–Ω—ë–Ω',
		refunded: '–í–æ–∑–≤—Ä–∞—â—ë–Ω',
		failed: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
		on_hold: '–ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏',
		};

	const statusRu = statusMap[orderData?.status] || orderData?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';

	return (
		<div className='page-wrapper'>
			<h1 className='page-title'>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ #{orderData.id}</h1>
            <div className='thank-you-wrapper'>
                <p>–°—Ç–∞—Ç—É—Å: <strong>{statusRu}</strong></p>
                <p>–°—É–º–º–∞: <strong>{orderData.total} {orderData.currency}</strong></p>
                <p>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {orderData.billing?.first_name} {orderData.billing?.last_name}</p>

                <h2>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</h2>
                <table className="thank-you-table">
                    <thead>
                        <tr>
                            <th>–¢–æ–≤–∞—Ä</th>
                            <th>–ö–æ–ª-–≤–æ</th>
                            <th>–¶–µ–Ω–∞ –∑–∞ —à—Ç.</th>
                            <th>–°—É–º–º–∞</th>
                        </tr>
                    </thead>
                    <tbody>
                        {orderData.line_items.map((item) => (
                            <tr key={item.id}>
                                <td>{item.name}</td>
                                <td>{item.quantity}</td>
                                <td>{item.price} {orderData.currency}</td>
                                <td>{(item.quantity * parseFloat(item.price)).toFixed(2)} {orderData.currency}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
		</div>
	);
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export default function ThankYou({ headerFooter }) {
	return (
		<Layout headerFooter={headerFooter || {}}>
			<ThankYouContent />
		</Layout>
	);
}

export async function getStaticProps() {
	const { data: headerFooterData } = await axios.get(HEADER_FOOTER_ENDPOINT);

	return {
		props: {
			headerFooter: headerFooterData?.data ?? {},
		},
		revalidate: 1,
	};
}
